import java.text.NumberFormat;

/*
 * TCSS305 - Spring 2013
 * Assignment 2 - Shopping Cart - Crystal Miraflor
 * 
 */

/**
 * An object representation of items. 
 * Stores information about individual items.
 * 
 * @author Crystal Miraflor (mirafcry@uw.edu)
 * @version ver. 1.00
 *
 */
public class Item {

  //fields
  
  /**
   * The default bulk quantity of the item.
   */
  private static final int DEFAULT_BULK = 0;
  
  /**
   * The default bulk quantity price of the item.
   */
  
  private static final double DEFAULT_BULK_PRICE = 0.0;
  
  /**
   * The number formatter for item prices.
   */
  private NumberFormat my_nf; //= NumberFormat.getCurrencyInstance();
  
  /**
   * The item name.
   */
  private String my_name;
  
  /**
   * The item price.
   */
  private double my_price;
  
  /**
   * The bulk quantity of the item.
   */
  private int my_bulk_quantity;
  
  /**
   * The bulk quantity price of the item.
   */
  private double my_bulk_price;
  
  /**
   * Creates an item with a single-item
   * price, a bulk quantity, and a bulk price.
   * 
   * @param the_name  Name of item assigned.
   * @param the_price Single price of the item assigned.
   * @param the_bulk_quantity Bulk quantity of item assigned.
   * @param the_bulk_price  Bulk price of the item assigned.
   * 
   */
  public Item(final String the_name, final double the_price, final int the_bulk_quantity, 
              final double the_bulk_price) {
    my_name = the_name;
    my_price = the_price;
    my_bulk_quantity = the_bulk_quantity;
    my_bulk_price = the_bulk_price;
    my_nf = NumberFormat.getCurrencyInstance();
    
  }
  
  /**
   * Creates an item.
   * 
   * @param the_name  Name of the item assigned.
   * @param the_price Price of the item assigned.
   * 
   */
  public Item(final String the_name, final double the_price) {
    this(the_name, the_price, DEFAULT_BULK, DEFAULT_BULK_PRICE);
    // my_name = the_name;
   // my_price = the_price;
    
  }
  
  /**
   * Calculates the total price of an item based on the
   * quantity.
   * 
   * @param the_quantity  Number of items wanted.
   * @return The calculated price for an item depending on the
   * quantity desired.
   * 
   */
  public double calculatePriceFor(final int the_quantity) {
    double calculated_price = 0.0;
    if (the_quantity >= my_bulk_quantity) {
      final int bulk = the_quantity / my_bulk_quantity;
      int remainder = 0;
      if (the_quantity % my_bulk_quantity != 0) {
        remainder = the_quantity % my_bulk_quantity;
      }
      calculated_price =  (bulk * my_bulk_price) + (remainder * my_price);
    } else {
      calculated_price = the_quantity * my_price;
    }
    
    return calculated_price;
    
  }
  
  /**
   * {@inheritDoc}}.
   */
  @Override
  public String toString() {
    final StringBuilder sb = new StringBuilder();
    sb.append(my_name);
    sb.append(", ");
    sb.append(my_nf.format(my_price));
    if (my_bulk_quantity != 0 && my_bulk_price != 0.0) {
      sb.append("(");
      sb.append(my_bulk_quantity);
      sb.append(" for ");
      sb.append(my_nf.format(my_bulk_price));
    }
    return sb.toString();
    
  }
  
  /**
   * Checks if two items are equivalent to each other.
   * 
   * @param the_other  The object being checked if equivalent
   * @return  True if they are exactly the same and false otherwise.
   * 
   */
  @Override
  public boolean equals(final Object the_other) {
    //CHECK AND FIX
    boolean result = false;
    if (this == the_other) {
      result = true;
    } else if ((the_other != null) && (the_other.getClass() == getClass())) {
    // cast the_other to the correct type
      final Item other = (Item) the_other;
      if (my_name.equals(other.my_name) && my_price == other.my_price && my_bulk_quantity 
          == other.my_bulk_quantity && my_bulk_price == other.my_bulk_price) {
        result = true;
      } else {
        result = false;
      }
    // compare the significant fields of the objects and set result appropriately
    // NEW in Java 7: consider using Objects.equals(my_field1, other.my_field1)
    }
    return result;
  }
  
  /**
   * Integer code for this item.
   * 
   * @return The code.
   */
  @Override
  public int hashCode() {
    return 1;
  }
}
